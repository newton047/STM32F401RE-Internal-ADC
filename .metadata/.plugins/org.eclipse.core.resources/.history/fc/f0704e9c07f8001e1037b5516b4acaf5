/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32f4xx.h"

/*Using GPIOA1 (ADC1_IN1)as input to ADC*/
/*
 * DMA2 is going to be used with Stream0 and Channel1 for ADC
 *
 *
 * */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

volatile uint8_t flag1=0;
volatile uint16_t data[4];


void DMA_Init(){


	RCC->AHB1ENR |= (0x1<<RCC_AHB1ENR_DMA2EN_Pos);	/*Enable clock to DMA2 peripheral*/

	/*Disable the active Stream and clear all active interupts*/
	DMA2_Stream0->CR = 0;
	while(DMA2_Stream0->CR & DMA_SxCR_EN_Msk);

	/*Select the channel and the priority*/
	DMA2_Stream0->CR &= ~(0x7<<DMA_SxCR_CHSEL_Pos);
	DMA2_Stream0->CR &= ~(0x3<<DMA_SxCR_PL_Pos);

	/*Configure Data Size and No of bytes*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_MSIZE_Pos); /*16 bit*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_PSIZE_Pos); /*16 bit*/

	/*No of databytes to transfer*/
	DMA2_Stream0->NDTR=4;

	/*Increment along the destination*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_MINC_Pos);

	/*COnfigure Direction and source and destination*/
	/*Set the Source address*/
	DMA2_Stream0->PAR = &(ADC1->DR);

	/*Set the Destination ADdress*/
	DMA2_Stream0->M0AR = data;


	/*Enable Circular Buffer and Peripheral control*/
	DMA2_Stream0->CR |= DMA_SxCR_CIRC_Msk;
	//DMA2_Stream0->CR|= (0x1<<DMA_SxCR_PFCTRL);

	/*Configure FIFO Parameters*/
	DMA2_Stream0->FCR|=  (DMA_SxFCR_DMDIS_Msk);  /*Disable Direct Mode*/
	DMA2_Stream0->FCR|= (0x3<<0);   			/*Full Buffer Length*/


	/*COnfigure Direction and Buffer parameters*/
	DMA2_Stream0->CR &= ~(0x3<<DMA_SxCR_DIR_Pos);  /*Ser direction from peripheral to memory*/
	//DMA2_Stream0->CR |= (0x1<<5);   			   /*Setting peripheral as flow controller*/

	/*Enable Transfer complete interrupt*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_TCIE_Pos);
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}



void ADC_Init(){

	/*Enable clock to ADC peripheral*/
	RCC->APB2ENR |=(1<<RCC_APB2ENR_ADC1EN_Pos);



	/*Set conversion sequence and length*/
	ADC1->SQR1 &= ~(0xF<<ADC_SQR1_L_Pos); //Set length of sequence
	ADC1->SQR3 |= (1<<ADC_SQR3_SQ1_Pos);     //Set Sequence number

	/*Configure ADC trigerring and resolution*/
	ADC1->CR2=0;
	ADC1->CR2|= (1<<ADC_CR2_DMA_Pos)|(1<<ADC_CR2_DDS_Pos)|(0x1<<1);
	/*Configure VOltage reference*/



}



int main(void)
{

	float  ADC_volt;
	/*Enable clock to GPIO peripheral*/

	RCC->AHB1ENR|= (1<<RCC_AHB1ENR_GPIOAEN_Pos);
	/*Set GPIO to Analog Mode*/
	GPIOA->MODER |= (0x3<<GPIO_MODER_MODER1_Pos);

	ADC_Init();
	DMA_Init();

	/*Enable DMA for ADC*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_EN_Pos);
	/*Enable ADC*/
	ADC1->CR2 |=(1);
	/*Start conversion*/
	ADC1->CR2 |= (1<<ADC_CR2_SWSTART_Pos);

	for(;;){




	}
}


void DMA2_Stream0_IRQHandler(void){

if((DMA2->LISR & (1<<5)))
{
	DMA2->LIFCR |= DMA_LIFCR_CTCIF0_Msk;
	//flag1=1;
}
}
