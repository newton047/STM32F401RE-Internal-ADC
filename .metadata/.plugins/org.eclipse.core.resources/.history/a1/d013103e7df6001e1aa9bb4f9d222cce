/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32f4xx.h"


/*
 * DMA2 is going to transfer between memory
 *
 *
 * */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

volatile uint8_t flag1=0;

int main(void)
{
	uint16_t data2,data2;

	/*Enable clock to DMA2 peripheral*/
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN_Msk;

	/*Disable the active Stream and clear all active interupts*/
	DMA2_Stream0->CR = 0x0;
	while(DMA2_Stream0->CR & DMA_SxCR_EN_Msk); /*Wait for Stream to be disabled*/

	/*COnfigure Memory size*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_MSIZE_Pos); /*16 bit*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_PSIZE_Pos); /*16 bit*/

	/*Enable memory increment*/
	DMA2_Stream0->CR |= ();

	/*Set the Source address*/
	DMA2_Stream0->PAR = &(ADC1->DR);

	/*Set the Destination ADdress*/
	DMA2_Stream0->M0AR = &data;

	/*Select the channel and the priority*/
	DMA2_Stream0->CR &= ~(0x7<<DMA_SxCR_CHSEL_Pos);
	DMA2_Stream0->CR &= ~(0x3<<DMA_SxCR_PL_Pos);





	/*No of databytes to transfer*/
	DMA2_Stream0->NDTR=1;

	/*Configure FIFO parameters*/
	DMA2_Stream0->FCR &= ~(0x1<<DMA_SxFCR_DMDIS_Pos); /*Direct Mode*/

	/*COnfigure Direction and Buffer parameters*/
	DMA2_Stream0->CR &= ~(0x3<<DMA_SxCR_DIR_Pos);  /*Ser direction from peripheral to memory*/
	DMA2_Stream0->CR |= (0x1<<5);   /*Setting peripheral as flow controller*/

	/*Enable interrupt for that channel*/
	DMA2->LIFCR |= (1<<DMA_LISR_TCIF0_Pos);
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);

	/*Enable DMA for ADC*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_EN_Pos);




	/*Configure ADC trigerring and resolution*/
	ADC1->CR2=0;
	ADC1->CR2|= (1<<ADC_CR2_DMA_Pos);
	/*Configure VOltage reference*/


	/*Enable Channel for ADC*/

	/*Caliberate the ADC */


	/*Set conversion sequence and length*/
	ADC1->SQR1 &= ~(0xF<<ADC_SQR1_L_Pos); //Set length of sequence
	ADC1->SQR3 |= (1<<ADC_SQR3_SQ1_Pos);     //Set Sequence number


	/*Enable ADC*/
	ADC1->CR2 |=(1);


	for(;;){

		/*Start conversion*/
		ADC1->CR2 |= (1<<ADC_CR2_SWSTART_Pos);

		//wait for flag to set
		while(flag1!=1);
		flag1=0;
		ADC_volt = ((3.3/4095)*data);

	}
}


void DMA2_Stream0_IRQHandler(void){

while(!(DMA2->LISR & (1<<5)))
{
	flag1=1;
}
}
