/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32f4xx.h"


/*
 * DMA2 is going to transfer between memory
 *
 *
 * */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

volatile uint8_t flag1=0;

int main(void)
{
	uint16_t data1[10];
	uint16_t data2[10]={10,20,30,40,50,60,70,80,90,100};

	/*Enable clock to DMA2 peripheral*/
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN_Msk;

	/*Disable the active Stream and clear all active interupts*/
	DMA2_Stream0->CR = 0x0;
	while(DMA2_Stream0->CR & DMA_SxCR_EN_Msk); /*Wait for Stream to be disabled*/

	/*COnfigure Memory size*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_MSIZE_Pos); /*16 bit*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_PSIZE_Pos); /*16 bit*/

	/*Enable memory increment for both memory and peripheral*/
	DMA2_Stream0->CR |= DMA_SxCR_MINC_Msk;
	DMA2_Stream0->CR |= DMA_SxCR_PINC_Msk;

	/*COnfigure Direction and Buffer parameters*/
	DMA2_Stream0->CR |= (0x2<<DMA_SxCR_DIR_Pos);  /*Ser direction from memory to memory*/

	/*Enable required interrupts*/
	DMA2_Stream0->CR |= (DMA_SxCR_TCIE_Msk);  /*Transfer completed*/
	DMA2_Stream0->CR |= DMA_SxCR_TEIE_Msk;    /*Transfer error interrupt*/

	/*Disable Direct Mode and configure FIFO*/
	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS_Msk;  /*Disabled direct mode*/
	DMA2_Stream0->FCR |= (0x3<<DMA_SxFCR_FTH_Pos);  /*Full Threshold of FIFO*/



	NVIC_EnableIRQ(DMA2_Stream0_IRQn);

	/*Set the Source address*/
	DMA2_Stream0->PAR = data2;

	/*Set the Destination ADdress*/
	DMA2_Stream0->M0AR = data1;

	/*No of databytes to transfer*/
	DMA2_Stream0->NDTR=10;

	/*Select the channel and the priority*/
	DMA2_Stream0->CR &= ~(0x7<<DMA_SxCR_CHSEL_Pos);
	DMA2_Stream0->CR &= ~(0x3<<DMA_SxCR_PL_Pos);






	/*Enable DMA for ADC*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_EN_Pos);




	for(;;){



	}
}


void DMA2_Stream0_IRQHandler(void){

while(!(DMA2->LISR & (1<<5)))
{
	flag1=1;
	DMA2->LICR|= (1<<5);
}
}
