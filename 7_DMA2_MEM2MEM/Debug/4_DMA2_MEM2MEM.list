
4_DMA2_MEM2MEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000250  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080003e4  080003e4  000103e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080003f8  080003f8  00010400  2**0
                  CONTENTS
  4 .ARM          00000000  080003f8  080003f8  00010400  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f8  08000400  00010400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000400  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000400  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010400  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006ce  00000000  00000000  00010473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001c4  00000000  00000000  00010b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000058  00000000  00000000  00010d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000039  00000000  00000000  00010d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000db61  00000000  00000000  00010d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005f6  00000000  00000000  0001e8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004fb5e  00000000  00000000  0001eef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000a8  00000000  00000000  0006ea50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0006eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003cc 	.word	0x080003cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003cc 	.word	0x080003cc

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <main>:
#endif

volatile uint8_t flag1=0;

int main(void)
{
 8000210:	b5b0      	push	{r4, r5, r7, lr}
 8000212:	b08a      	sub	sp, #40	; 0x28
 8000214:	af00      	add	r7, sp, #0
	uint16_t data1[10];
	uint16_t data2[10]={10,20,30,40,50,60,70,80,90,100};
 8000216:	4b36      	ldr	r3, [pc, #216]	; (80002f0 <main+0xe0>)
 8000218:	463c      	mov	r4, r7
 800021a:	461d      	mov	r5, r3
 800021c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800021e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000220:	682b      	ldr	r3, [r5, #0]
 8000222:	6023      	str	r3, [r4, #0]

	/*Enable clock to DMA2 peripheral*/
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN_Msk;
 8000224:	4b33      	ldr	r3, [pc, #204]	; (80002f4 <main+0xe4>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a32      	ldr	r2, [pc, #200]	; (80002f4 <main+0xe4>)
 800022a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800022e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Disable the active Stream and clear all active interupts*/
	DMA2_Stream0->CR = 0x0;
 8000230:	4b31      	ldr	r3, [pc, #196]	; (80002f8 <main+0xe8>)
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
	while(DMA2_Stream0->CR & DMA_SxCR_EN_Msk); /*Wait for Stream to be disabled*/
 8000236:	bf00      	nop
 8000238:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <main+0xe8>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f003 0301 	and.w	r3, r3, #1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d1f9      	bne.n	8000238 <main+0x28>

	/*COnfigure Memory size*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_MSIZE_Pos); /*16 bit*/
 8000244:	4b2c      	ldr	r3, [pc, #176]	; (80002f8 <main+0xe8>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a2b      	ldr	r2, [pc, #172]	; (80002f8 <main+0xe8>)
 800024a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800024e:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_PSIZE_Pos); /*16 bit*/
 8000250:	4b29      	ldr	r3, [pc, #164]	; (80002f8 <main+0xe8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a28      	ldr	r2, [pc, #160]	; (80002f8 <main+0xe8>)
 8000256:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800025a:	6013      	str	r3, [r2, #0]

	/*Enable memory increment for both memory and peripheral*/
	DMA2_Stream0->CR |= DMA_SxCR_MINC_Msk;
 800025c:	4b26      	ldr	r3, [pc, #152]	; (80002f8 <main+0xe8>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a25      	ldr	r2, [pc, #148]	; (80002f8 <main+0xe8>)
 8000262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000266:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_PINC_Msk;
 8000268:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <main+0xe8>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a22      	ldr	r2, [pc, #136]	; (80002f8 <main+0xe8>)
 800026e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000272:	6013      	str	r3, [r2, #0]

	/*COnfigure Direction and Buffer parameters*/
	DMA2_Stream0->CR |= (0x2<<DMA_SxCR_DIR_Pos);  /*Ser direction from memory to memory*/
 8000274:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <main+0xe8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a1f      	ldr	r2, [pc, #124]	; (80002f8 <main+0xe8>)
 800027a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027e:	6013      	str	r3, [r2, #0]

	/*Enable required interrupts*/
	DMA2_Stream0->CR |= (DMA_SxCR_TCIE_Msk);  /*Transfer completed*/
 8000280:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <main+0xe8>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a1c      	ldr	r2, [pc, #112]	; (80002f8 <main+0xe8>)
 8000286:	f043 0310 	orr.w	r3, r3, #16
 800028a:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_TEIE_Msk;    /*Transfer error interrupt*/
 800028c:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <main+0xe8>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a19      	ldr	r2, [pc, #100]	; (80002f8 <main+0xe8>)
 8000292:	f043 0304 	orr.w	r3, r3, #4
 8000296:	6013      	str	r3, [r2, #0]

	/*Disable Direct Mode and configure FIFO*/
	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS_Msk;  /*Disabled direct mode*/
 8000298:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <main+0xe8>)
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	4a16      	ldr	r2, [pc, #88]	; (80002f8 <main+0xe8>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6153      	str	r3, [r2, #20]
	DMA2_Stream0->FCR |= (0x3<<DMA_SxFCR_FTH_Pos);  /*Full Threshold of FIFO*/
 80002a4:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <main+0xe8>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4a13      	ldr	r2, [pc, #76]	; (80002f8 <main+0xe8>)
 80002aa:	f043 0303 	orr.w	r3, r3, #3
 80002ae:	6153      	str	r3, [r2, #20]



	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80002b0:	2038      	movs	r0, #56	; 0x38
 80002b2:	f7ff ff8f 	bl	80001d4 <__NVIC_EnableIRQ>

	/*Set the Source address*/
	DMA2_Stream0->PAR = data2;
 80002b6:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <main+0xe8>)
 80002b8:	463b      	mov	r3, r7
 80002ba:	6093      	str	r3, [r2, #8]

	/*Set the Destination ADdress*/
	DMA2_Stream0->M0AR = data1;
 80002bc:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <main+0xe8>)
 80002be:	f107 0314 	add.w	r3, r7, #20
 80002c2:	60d3      	str	r3, [r2, #12]

	/*No of databytes to transfer*/
	DMA2_Stream0->NDTR=10;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <main+0xe8>)
 80002c6:	220a      	movs	r2, #10
 80002c8:	605a      	str	r2, [r3, #4]

	/*Select the channel and the priority*/
	DMA2_Stream0->CR &= ~(0x7<<DMA_SxCR_CHSEL_Pos);
 80002ca:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <main+0xe8>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <main+0xe8>)
 80002d0:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80002d4:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~(0x3<<DMA_SxCR_PL_Pos);
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <main+0xe8>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <main+0xe8>)
 80002dc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80002e0:	6013      	str	r3, [r2, #0]




	/*Enable DMA for ADC*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_EN_Pos);
 80002e2:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <main+0xe8>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <main+0xe8>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	6013      	str	r3, [r2, #0]




	for(;;){
 80002ee:	e7fe      	b.n	80002ee <main+0xde>
 80002f0:	080003e4 	.word	0x080003e4
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40026410 	.word	0x40026410

080002fc <DMA2_Stream0_IRQHandler>:

	}
}


void DMA2_Stream0_IRQHandler(void){
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0

if((DMA2->LISR & (1<<5)))
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <DMA2_Stream0_IRQHandler+0x2c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 0320 	and.w	r3, r3, #32
 8000308:	2b00      	cmp	r3, #0
 800030a:	d008      	beq.n	800031e <DMA2_Stream0_IRQHandler+0x22>
{
	flag1=1;
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <DMA2_Stream0_IRQHandler+0x30>)
 800030e:	2201      	movs	r2, #1
 8000310:	701a      	strb	r2, [r3, #0]
	DMA2->LIFCR|= (1<<5);
 8000312:	4b05      	ldr	r3, [pc, #20]	; (8000328 <DMA2_Stream0_IRQHandler+0x2c>)
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	4a04      	ldr	r2, [pc, #16]	; (8000328 <DMA2_Stream0_IRQHandler+0x2c>)
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	6093      	str	r3, [r2, #8]
}
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40026400 	.word	0x40026400
 800032c:	2000001c 	.word	0x2000001c

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	; (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	; (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	; (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	; (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 f811 	bl	8000384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ff55 	bl	8000210 <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000374:	08000400 	.word	0x08000400
  ldr r2, =_sbss
 8000378:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800037c:	20000020 	.word	0x20000020

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <__libc_init_array>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	4d0d      	ldr	r5, [pc, #52]	; (80003bc <__libc_init_array+0x38>)
 8000388:	4c0d      	ldr	r4, [pc, #52]	; (80003c0 <__libc_init_array+0x3c>)
 800038a:	1b64      	subs	r4, r4, r5
 800038c:	10a4      	asrs	r4, r4, #2
 800038e:	2600      	movs	r6, #0
 8000390:	42a6      	cmp	r6, r4
 8000392:	d109      	bne.n	80003a8 <__libc_init_array+0x24>
 8000394:	4d0b      	ldr	r5, [pc, #44]	; (80003c4 <__libc_init_array+0x40>)
 8000396:	4c0c      	ldr	r4, [pc, #48]	; (80003c8 <__libc_init_array+0x44>)
 8000398:	f000 f818 	bl	80003cc <_init>
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	2600      	movs	r6, #0
 80003a2:	42a6      	cmp	r6, r4
 80003a4:	d105      	bne.n	80003b2 <__libc_init_array+0x2e>
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ac:	4798      	blx	r3
 80003ae:	3601      	adds	r6, #1
 80003b0:	e7ee      	b.n	8000390 <__libc_init_array+0xc>
 80003b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b6:	4798      	blx	r3
 80003b8:	3601      	adds	r6, #1
 80003ba:	e7f2      	b.n	80003a2 <__libc_init_array+0x1e>
 80003bc:	080003f8 	.word	0x080003f8
 80003c0:	080003f8 	.word	0x080003f8
 80003c4:	080003f8 	.word	0x080003f8
 80003c8:	080003fc 	.word	0x080003fc

080003cc <_init>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr

080003d8 <_fini>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr
