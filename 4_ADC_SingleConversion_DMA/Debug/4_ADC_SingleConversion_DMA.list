
4_ADC_SingleConversion_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000464  0800046c  0001046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000464  08000464  0001046c  2**0
                  CONTENTS
  4 .ARM          00000000  08000464  08000464  0001046c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000464  0800046c  0001046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000464  08000464  00010464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  0800046c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800046c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001046c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001049c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000894  00000000  00000000  000104df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001f1  00000000  00000000  00010d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000045  00000000  00000000  00010fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000db61  00000000  00000000  00011015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000647  00000000  00000000  0001eb76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004fbbe  00000000  00000000  0001f1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000dc  00000000  00000000  0006ed7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0006ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800044c 	.word	0x0800044c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800044c 	.word	0x0800044c

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <DMA_Init>:

volatile uint8_t flag1=0;
volatile uint16_t data[4];


void DMA_Init(){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0


	RCC->AHB1ENR |= (0x1<<RCC_AHB1ENR_DMA2EN_Pos);	/*Enable clock to DMA2 peripheral*/
 8000214:	4b2c      	ldr	r3, [pc, #176]	; (80002c8 <DMA_Init+0xb8>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000218:	4a2b      	ldr	r2, [pc, #172]	; (80002c8 <DMA_Init+0xb8>)
 800021a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800021e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Disable the active Stream and clear all active interupts*/
	DMA2_Stream0->CR = 0;
 8000220:	4b2a      	ldr	r3, [pc, #168]	; (80002cc <DMA_Init+0xbc>)
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
	while(DMA2_Stream0->CR & DMA_SxCR_EN_Msk);
 8000226:	bf00      	nop
 8000228:	4b28      	ldr	r3, [pc, #160]	; (80002cc <DMA_Init+0xbc>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f003 0301 	and.w	r3, r3, #1
 8000230:	2b00      	cmp	r3, #0
 8000232:	d1f9      	bne.n	8000228 <DMA_Init+0x18>

	/*Select the channel and the priority*/
	DMA2_Stream0->CR &= ~(0x7<<DMA_SxCR_CHSEL_Pos);
 8000234:	4b25      	ldr	r3, [pc, #148]	; (80002cc <DMA_Init+0xbc>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a24      	ldr	r2, [pc, #144]	; (80002cc <DMA_Init+0xbc>)
 800023a:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800023e:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~(0x3<<DMA_SxCR_PL_Pos);
 8000240:	4b22      	ldr	r3, [pc, #136]	; (80002cc <DMA_Init+0xbc>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a21      	ldr	r2, [pc, #132]	; (80002cc <DMA_Init+0xbc>)
 8000246:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800024a:	6013      	str	r3, [r2, #0]

	/*Configure Data Size and No of bytes*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_MSIZE_Pos); /*16 bit*/
 800024c:	4b1f      	ldr	r3, [pc, #124]	; (80002cc <DMA_Init+0xbc>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a1e      	ldr	r2, [pc, #120]	; (80002cc <DMA_Init+0xbc>)
 8000252:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000256:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_PSIZE_Pos); /*16 bit*/
 8000258:	4b1c      	ldr	r3, [pc, #112]	; (80002cc <DMA_Init+0xbc>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a1b      	ldr	r2, [pc, #108]	; (80002cc <DMA_Init+0xbc>)
 800025e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000262:	6013      	str	r3, [r2, #0]

	/*No of databytes to transfer*/
	DMA2_Stream0->NDTR=1;
 8000264:	4b19      	ldr	r3, [pc, #100]	; (80002cc <DMA_Init+0xbc>)
 8000266:	2201      	movs	r2, #1
 8000268:	605a      	str	r2, [r3, #4]

	/*Increment along the destination*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_MINC_Pos);
 800026a:	4b18      	ldr	r3, [pc, #96]	; (80002cc <DMA_Init+0xbc>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a17      	ldr	r2, [pc, #92]	; (80002cc <DMA_Init+0xbc>)
 8000270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000274:	6013      	str	r3, [r2, #0]

	/*COnfigure Direction and source and destination*/
	/*Set the Source address*/
	DMA2_Stream0->PAR = &(ADC1->DR);
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <DMA_Init+0xbc>)
 8000278:	4a15      	ldr	r2, [pc, #84]	; (80002d0 <DMA_Init+0xc0>)
 800027a:	609a      	str	r2, [r3, #8]

	/*Set the Destination ADdress*/
	DMA2_Stream0->M0AR = data;
 800027c:	4b13      	ldr	r3, [pc, #76]	; (80002cc <DMA_Init+0xbc>)
 800027e:	4a15      	ldr	r2, [pc, #84]	; (80002d4 <DMA_Init+0xc4>)
 8000280:	60da      	str	r2, [r3, #12]


	/*Enable Circular Buffer and Peripheral control*/
	DMA2_Stream0->CR |= DMA_SxCR_CIRC_Msk;
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <DMA_Init+0xbc>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a11      	ldr	r2, [pc, #68]	; (80002cc <DMA_Init+0xbc>)
 8000288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800028c:	6013      	str	r3, [r2, #0]
	//DMA2_Stream0->CR|= (0x1<<DMA_SxCR_PFCTRL);

	/*Configure FIFO Parameters*/
	DMA2_Stream0->FCR|=  (DMA_SxFCR_DMDIS_Msk);  /*Disable Direct Mode*/
 800028e:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <DMA_Init+0xbc>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <DMA_Init+0xbc>)
 8000294:	f043 0304 	orr.w	r3, r3, #4
 8000298:	6153      	str	r3, [r2, #20]
	DMA2_Stream0->FCR|= (0x3<<0);   			/*Full Buffer Length*/
 800029a:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <DMA_Init+0xbc>)
 800029c:	695b      	ldr	r3, [r3, #20]
 800029e:	4a0b      	ldr	r2, [pc, #44]	; (80002cc <DMA_Init+0xbc>)
 80002a0:	f043 0303 	orr.w	r3, r3, #3
 80002a4:	6153      	str	r3, [r2, #20]


	/*COnfigure Direction and Buffer parameters*/
	DMA2_Stream0->CR &= ~(0x3<<DMA_SxCR_DIR_Pos);  /*Ser direction from peripheral to memory*/
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <DMA_Init+0xbc>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a08      	ldr	r2, [pc, #32]	; (80002cc <DMA_Init+0xbc>)
 80002ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80002b0:	6013      	str	r3, [r2, #0]
	//DMA2_Stream0->CR |= (0x1<<5);   			   /*Setting peripheral as flow controller*/

	/*Enable Transfer complete interrupt*/
	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_TCIE_Pos);
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <DMA_Init+0xbc>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a05      	ldr	r2, [pc, #20]	; (80002cc <DMA_Init+0xbc>)
 80002b8:	f043 0310 	orr.w	r3, r3, #16
 80002bc:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80002be:	2038      	movs	r0, #56	; 0x38
 80002c0:	f7ff ff88 	bl	80001d4 <__NVIC_EnableIRQ>

}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40026410 	.word	0x40026410
 80002d0:	4001204c 	.word	0x4001204c
 80002d4:	2000001c 	.word	0x2000001c

080002d8 <ADC_Init>:



void ADC_Init(){
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0

	/*Enable clock to ADC peripheral*/
	RCC->APB2ENR |=(1<<RCC_APB2ENR_ADC1EN_Pos);
 80002dc:	4b10      	ldr	r3, [pc, #64]	; (8000320 <ADC_Init+0x48>)
 80002de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002e0:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <ADC_Init+0x48>)
 80002e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e6:	6453      	str	r3, [r2, #68]	; 0x44



	/*Set conversion sequence and length*/
	ADC1->SQR1 &= ~(0xF<<ADC_SQR1_L_Pos); //Set length of sequence
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <ADC_Init+0x4c>)
 80002ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <ADC_Init+0x4c>)
 80002ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80002f2:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR3 |= (1<<ADC_SQR3_SQ1_Pos);     //Set Sequence number
 80002f4:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <ADC_Init+0x4c>)
 80002f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002f8:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <ADC_Init+0x4c>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6353      	str	r3, [r2, #52]	; 0x34

	/*Configure ADC trigerring and resolution*/
	ADC1->CR2=0;
 8000300:	4b08      	ldr	r3, [pc, #32]	; (8000324 <ADC_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
	ADC1->CR2|= (1<<ADC_CR2_DMA_Pos)|(1<<ADC_CR2_DDS_Pos)|(0x1<<1);
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <ADC_Init+0x4c>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	4a06      	ldr	r2, [pc, #24]	; (8000324 <ADC_Init+0x4c>)
 800030c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000310:	f043 0302 	orr.w	r3, r3, #2
 8000314:	6093      	str	r3, [r2, #8]




}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	40023800 	.word	0x40023800
 8000324:	40012000 	.word	0x40012000

08000328 <main>:



int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0

	float  ADC_volt;


	RCC->AHB1ENR|= (1<<RCC_AHB1ENR_GPIOAEN_Pos);	/*Enable clock to GPIO peripheral*/
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <main+0x4c>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000330:	4a10      	ldr	r2, [pc, #64]	; (8000374 <main+0x4c>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= (0x3<<GPIO_MODER_MODER1_Pos);	/*Set GPIO to Analog Mode*/
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <main+0x50>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <main+0x50>)
 800033e:	f043 030c 	orr.w	r3, r3, #12
 8000342:	6013      	str	r3, [r2, #0]

	ADC_Init();
 8000344:	f7ff ffc8 	bl	80002d8 <ADC_Init>
	DMA_Init();
 8000348:	f7ff ff62 	bl	8000210 <DMA_Init>


	DMA2_Stream0->CR |= (0x1<<DMA_SxCR_EN_Pos);		/*Enable DMA for ADC*/
 800034c:	4b0b      	ldr	r3, [pc, #44]	; (800037c <main+0x54>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a0a      	ldr	r2, [pc, #40]	; (800037c <main+0x54>)
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6013      	str	r3, [r2, #0]

	ADC1->CR2 |=(1);									/*Enable ADC*/
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <main+0x58>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	4a08      	ldr	r2, [pc, #32]	; (8000380 <main+0x58>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6093      	str	r3, [r2, #8]

	ADC1->CR2 |= (1<<ADC_CR2_SWSTART_Pos);			/*Start conversion*/
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <main+0x58>)
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	4a05      	ldr	r2, [pc, #20]	; (8000380 <main+0x58>)
 800036a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800036e:	6093      	str	r3, [r2, #8]

	for(;;){
 8000370:	e7fe      	b.n	8000370 <main+0x48>
 8000372:	bf00      	nop
 8000374:	40023800 	.word	0x40023800
 8000378:	40020000 	.word	0x40020000
 800037c:	40026410 	.word	0x40026410
 8000380:	40012000 	.word	0x40012000

08000384 <DMA2_Stream0_IRQHandler>:

	}
}


void DMA2_Stream0_IRQHandler(void){
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0

if((DMA2->LISR & (1<<5)))
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <DMA2_Stream0_IRQHandler+0x28>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f003 0320 	and.w	r3, r3, #32
 8000390:	2b00      	cmp	r3, #0
 8000392:	d005      	beq.n	80003a0 <DMA2_Stream0_IRQHandler+0x1c>
{
	DMA2->LIFCR |= DMA_LIFCR_CTCIF0_Msk;
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <DMA2_Stream0_IRQHandler+0x28>)
 8000396:	689b      	ldr	r3, [r3, #8]
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <DMA2_Stream0_IRQHandler+0x28>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6093      	str	r3, [r2, #8]
	//flag1=1;
}
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40026400 	.word	0x40026400

080003b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b0:	480d      	ldr	r0, [pc, #52]	; (80003e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b8:	480c      	ldr	r0, [pc, #48]	; (80003ec <LoopForever+0x6>)
  ldr r1, =_edata
 80003ba:	490d      	ldr	r1, [pc, #52]	; (80003f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <LoopForever+0xe>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c0:	e002      	b.n	80003c8 <LoopCopyDataInit>

080003c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c6:	3304      	adds	r3, #4

080003c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003cc:	d3f9      	bcc.n	80003c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ce:	4a0a      	ldr	r2, [pc, #40]	; (80003f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d0:	4c0a      	ldr	r4, [pc, #40]	; (80003fc <LoopForever+0x16>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d4:	e001      	b.n	80003da <LoopFillZerobss>

080003d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d8:	3204      	adds	r2, #4

080003da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003dc:	d3fb      	bcc.n	80003d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003de:	f000 f811 	bl	8000404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e2:	f7ff ffa1 	bl	8000328 <main>

080003e6 <LoopForever>:

LoopForever:
  b LoopForever
 80003e6:	e7fe      	b.n	80003e6 <LoopForever>
  ldr   r0, =_estack
 80003e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f4:	0800046c 	.word	0x0800046c
  ldr r2, =_sbss
 80003f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003fc:	20000024 	.word	0x20000024

08000400 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC_IRQHandler>
	...

08000404 <__libc_init_array>:
 8000404:	b570      	push	{r4, r5, r6, lr}
 8000406:	4d0d      	ldr	r5, [pc, #52]	; (800043c <__libc_init_array+0x38>)
 8000408:	4c0d      	ldr	r4, [pc, #52]	; (8000440 <__libc_init_array+0x3c>)
 800040a:	1b64      	subs	r4, r4, r5
 800040c:	10a4      	asrs	r4, r4, #2
 800040e:	2600      	movs	r6, #0
 8000410:	42a6      	cmp	r6, r4
 8000412:	d109      	bne.n	8000428 <__libc_init_array+0x24>
 8000414:	4d0b      	ldr	r5, [pc, #44]	; (8000444 <__libc_init_array+0x40>)
 8000416:	4c0c      	ldr	r4, [pc, #48]	; (8000448 <__libc_init_array+0x44>)
 8000418:	f000 f818 	bl	800044c <_init>
 800041c:	1b64      	subs	r4, r4, r5
 800041e:	10a4      	asrs	r4, r4, #2
 8000420:	2600      	movs	r6, #0
 8000422:	42a6      	cmp	r6, r4
 8000424:	d105      	bne.n	8000432 <__libc_init_array+0x2e>
 8000426:	bd70      	pop	{r4, r5, r6, pc}
 8000428:	f855 3b04 	ldr.w	r3, [r5], #4
 800042c:	4798      	blx	r3
 800042e:	3601      	adds	r6, #1
 8000430:	e7ee      	b.n	8000410 <__libc_init_array+0xc>
 8000432:	f855 3b04 	ldr.w	r3, [r5], #4
 8000436:	4798      	blx	r3
 8000438:	3601      	adds	r6, #1
 800043a:	e7f2      	b.n	8000422 <__libc_init_array+0x1e>
 800043c:	08000464 	.word	0x08000464
 8000440:	08000464 	.word	0x08000464
 8000444:	08000464 	.word	0x08000464
 8000448:	08000468 	.word	0x08000468

0800044c <_init>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr

08000458 <_fini>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr
